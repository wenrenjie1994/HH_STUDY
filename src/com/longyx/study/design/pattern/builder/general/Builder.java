package com.longyx.study.design.pattern.builder.general;

/**
 * 顶层builder设计
 * 建造者模式的适用场景：
 * 1、适用于创建对象需要很多步骤，但是步骤的顺序不一定固定
 * 2、如果一个对象有非常复杂的内部结构(很多属性)
 * 3、把复杂对象的创建和使用分离
 * 优点：
 * 1、封装性好，创建和使用分离
 * 2、扩展性好，建造类之间独立，一定程度上解耦
 * 缺点：
 * 1、产生多余的Builder对象
 * 2、产品内部发生变化，建造者都要修改，成本较大
 * 建造者模式和工厂模式的区别：
 * 1、建造者模式更加注重方法的调用顺序，工厂模式注重于创建对象
 * 2、创建对象的力度不同，建造者模式创建复杂的对象(过程需要定制)，由各种复杂的部件组成，工厂模式创建出来的都一样
 * 3、关注点：工厂模式只需要把对象创建出来就可以了，而建造者模式中不仅要创建出这个对象，还要知道这个对象由哪些部件组成
 * 4、建造者模式根据建造过程中的顺序不一样，最终的对象部件组成也不一样
 * @author Mr.Longyx
 * @date 2020年07月15日 8:45
 */
public interface Builder {
    Book build();
}
