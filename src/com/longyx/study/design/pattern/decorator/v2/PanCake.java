package com.spdb.study.design.pattern.decorator.v2;

/**
 * 顶层设计 引入装饰者模式(抽象类)
 * 装饰器模式的适用场景：
 * 1、用于扩展一个类的功能或给一个类添加附加职责
 * 2、动态的给一个对象添加功能，这些功能可以再动态的撤销
 * 优点：
 * 1、装饰器是继承的有力补充，比继承灵活，不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用
 * 2、通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同的效果
 * 3、装饰者完全遵守开闭原则
 * 缺点：
 * 1、会出现更多的代码，更多的类，增加程序复杂性。
 * 2、动态装饰时，多层装饰时会更复杂
 * 装饰器模式和适配器模式对比：
 * 1、形式上，装饰器模式是一种非常特别的适配器模式，而适配器模式没有层级关系，装饰器模式有层级关系
 * 2、装饰者和被装饰者都实现同一个接口，主要目的是为了扩展之后依旧保留OOP关系，而适配器和被适配者没有必然联系，通常是采用继承或代理的形式进行包装
 * 3、装饰器模式满足is-a关系，而适配器模式满足has-a关系
 * 4、功能上装饰器模式注重覆盖、扩展，而适配器模式注重兼容和转换
 * 5、装饰器模式基于前置考虑(设计阶段便充分考虑),而适配器模式基于后置考虑(有点亡羊补牢的感觉)
 * @author Mr.Longyx
 * @date 2020年07月03日 10:33
 */
public abstract class PanCake {
    protected abstract String getMsg(String food);
    protected abstract int getPrice(int price);
}
